/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.information_schema.tables;


import com.nda.jooq.generated.information_schema.InformationSchema;
import com.nda.jooq.generated.information_schema.tables.records.InnodbTablesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTables extends TableImpl<InnodbTablesRecord> {

    private static final long serialVersionUID = 1875519140;

    /**
     * The reference instance of <code>information_schema.INNODB_TABLES</code>
     */
    public static final InnodbTables INNODB_TABLES = new InnodbTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbTablesRecord> getRecordType() {
        return InnodbTablesRecord.class;
    }

    /**
     * The column <code>information_schema.INNODB_TABLES.TABLE_ID</code>.
     */
    public final TableField<InnodbTablesRecord, ULong> TABLE_ID = createField("TABLE_ID", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.NAME</code>.
     */
    public final TableField<InnodbTablesRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(218).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.FLAG</code>.
     */
    public final TableField<InnodbTablesRecord, Integer> FLAG = createField("FLAG", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.N_COLS</code>.
     */
    public final TableField<InnodbTablesRecord, Integer> N_COLS = createField("N_COLS", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.SPACE</code>.
     */
    public final TableField<InnodbTablesRecord, Long> SPACE = createField("SPACE", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.ROW_FORMAT</code>.
     */
    public final TableField<InnodbTablesRecord, String> ROW_FORMAT = createField("ROW_FORMAT", org.jooq.impl.SQLDataType.VARCHAR(4).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.ZIP_PAGE_SIZE</code>.
     */
    public final TableField<InnodbTablesRecord, UInteger> ZIP_PAGE_SIZE = createField("ZIP_PAGE_SIZE", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.SPACE_TYPE</code>.
     */
    public final TableField<InnodbTablesRecord, String> SPACE_TYPE = createField("SPACE_TYPE", org.jooq.impl.SQLDataType.VARCHAR(3).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_TABLES.INSTANT_COLS</code>.
     */
    public final TableField<InnodbTablesRecord, Integer> INSTANT_COLS = createField("INSTANT_COLS", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>information_schema.INNODB_TABLES</code> table reference
     */
    public InnodbTables() {
        this(DSL.name("INNODB_TABLES"), null);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_TABLES</code> table reference
     */
    public InnodbTables(String alias) {
        this(DSL.name(alias), INNODB_TABLES);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_TABLES</code> table reference
     */
    public InnodbTables(Name alias) {
        this(alias, INNODB_TABLES);
    }

    private InnodbTables(Name alias, Table<InnodbTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnodbTables(Name alias, Table<InnodbTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTables as(String alias) {
        return new InnodbTables(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTables as(Name alias) {
        return new InnodbTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbTables rename(String name) {
        return new InnodbTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbTables rename(Name name) {
        return new InnodbTables(name, null);
    }
}
