/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.information_schema.tables;


import com.nda.jooq.generated.information_schema.InformationSchema;
import com.nda.jooq.generated.information_schema.tables.records.InnodbColumnsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbColumns extends TableImpl<InnodbColumnsRecord> {

    private static final long serialVersionUID = 238007569;

    /**
     * The reference instance of <code>information_schema.INNODB_COLUMNS</code>
     */
    public static final InnodbColumns INNODB_COLUMNS = new InnodbColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbColumnsRecord> getRecordType() {
        return InnodbColumnsRecord.class;
    }

    /**
     * The column <code>information_schema.INNODB_COLUMNS.TABLE_ID</code>.
     */
    public final TableField<InnodbColumnsRecord, ULong> TABLE_ID = createField("TABLE_ID", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.INNODB_COLUMNS.NAME</code>.
     */
    public final TableField<InnodbColumnsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.INNODB_COLUMNS.POS</code>.
     */
    public final TableField<InnodbColumnsRecord, ULong> POS = createField("POS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.INNODB_COLUMNS.MTYPE</code>.
     */
    public final TableField<InnodbColumnsRecord, Integer> MTYPE = createField("MTYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_COLUMNS.PRTYPE</code>.
     */
    public final TableField<InnodbColumnsRecord, Integer> PRTYPE = createField("PRTYPE", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_COLUMNS.LEN</code>.
     */
    public final TableField<InnodbColumnsRecord, Integer> LEN = createField("LEN", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_COLUMNS.HAS_DEFAULT</code>.
     */
    public final TableField<InnodbColumnsRecord, Integer> HAS_DEFAULT = createField("HAS_DEFAULT", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>information_schema.INNODB_COLUMNS.DEFAULT_VALUE</code>.
     */
    public final TableField<InnodbColumnsRecord, String> DEFAULT_VALUE = createField("DEFAULT_VALUE", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>information_schema.INNODB_COLUMNS</code> table reference
     */
    public InnodbColumns() {
        this(DSL.name("INNODB_COLUMNS"), null);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_COLUMNS</code> table reference
     */
    public InnodbColumns(String alias) {
        this(DSL.name(alias), INNODB_COLUMNS);
    }

    /**
     * Create an aliased <code>information_schema.INNODB_COLUMNS</code> table reference
     */
    public InnodbColumns(Name alias) {
        this(alias, INNODB_COLUMNS);
    }

    private InnodbColumns(Name alias, Table<InnodbColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InnodbColumns(Name alias, Table<InnodbColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbColumns as(String alias) {
        return new InnodbColumns(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbColumns as(Name alias) {
        return new InnodbColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbColumns rename(String name) {
        return new InnodbColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbColumns rename(Name name) {
        return new InnodbColumns(name, null);
    }
}
