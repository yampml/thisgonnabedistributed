/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.mysql.tables.records;


import com.nda.jooq.generated.mysql.enums.SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType;
import com.nda.jooq.generated.mysql.enums.SlaveRelayLogInfoRequireTablePrimaryKeyCheck;
import com.nda.jooq.generated.mysql.tables.SlaveRelayLogInfo;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Relay Log Information
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveRelayLogInfoRecord extends UpdatableRecordImpl<SlaveRelayLogInfoRecord> implements Record15<UInteger, String, ULong, String, ULong, Integer, UInteger, UInteger, String, String, String, Byte, SlaveRelayLogInfoRequireTablePrimaryKeyCheck, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType, String> {

    private static final long serialVersionUID = 2002792240;

    /**
     * Setter for <code>mysql.slave_relay_log_info.Number_of_lines</code>. Number of lines in the file or rows in the table. Used to version table definitions.
     */
    public void setNumberOfLines(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Number_of_lines</code>. Number of lines in the file or rows in the table. Used to version table definitions.
     */
    public UInteger getNumberOfLines() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Relay_log_name</code>. The name of the current relay log file.
     */
    public void setRelayLogName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Relay_log_name</code>. The name of the current relay log file.
     */
    public String getRelayLogName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Relay_log_pos</code>. The relay log position of the last executed event.
     */
    public void setRelayLogPos(ULong value) {
        set(2, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Relay_log_pos</code>. The relay log position of the last executed event.
     */
    public ULong getRelayLogPos() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Master_log_name</code>. The name of the master binary log file from which the events in the relay log file were read.
     */
    public void setMasterLogName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Master_log_name</code>. The name of the master binary log file from which the events in the relay log file were read.
     */
    public String getMasterLogName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Master_log_pos</code>. The master log position of the last executed event.
     */
    public void setMasterLogPos(ULong value) {
        set(4, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Master_log_pos</code>. The master log position of the last executed event.
     */
    public ULong getMasterLogPos() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Sql_delay</code>. The number of seconds that the slave must lag behind the master.
     */
    public void setSqlDelay(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Sql_delay</code>. The number of seconds that the slave must lag behind the master.
     */
    public Integer getSqlDelay() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Number_of_workers</code>.
     */
    public void setNumberOfWorkers(UInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Number_of_workers</code>.
     */
    public UInteger getNumberOfWorkers() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Id</code>. Internal Id that uniquely identifies this record.
     */
    public void setId(UInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Id</code>. Internal Id that uniquely identifies this record.
     */
    public UInteger getId() {
        return (UInteger) get(7);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Channel_name</code>. The channel on which the replica is connected to a source. Used in Multisource Replication
     */
    public void setChannelName(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Channel_name</code>. The channel on which the replica is connected to a source. Used in Multisource Replication
     */
    public String getChannelName() {
        return (String) get(8);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Privilege_checks_username</code>. Username part of PRIVILEGE_CHECKS_USER.
     */
    public void setPrivilegeChecksUsername(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Privilege_checks_username</code>. Username part of PRIVILEGE_CHECKS_USER.
     */
    public String getPrivilegeChecksUsername() {
        return (String) get(9);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Privilege_checks_hostname</code>. Hostname part of PRIVILEGE_CHECKS_USER.
     */
    public void setPrivilegeChecksHostname(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Privilege_checks_hostname</code>. Hostname part of PRIVILEGE_CHECKS_USER.
     */
    public String getPrivilegeChecksHostname() {
        return (String) get(10);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Require_row_format</code>. Indicates whether the channel shall only accept row based events.
     */
    public void setRequireRowFormat(Byte value) {
        set(11, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Require_row_format</code>. Indicates whether the channel shall only accept row based events.
     */
    public Byte getRequireRowFormat() {
        return (Byte) get(11);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Require_table_primary_key_check</code>. Indicates what is the channel policy regarding tables having primary keys on create and alter table queries
     */
    public void setRequireTablePrimaryKeyCheck(SlaveRelayLogInfoRequireTablePrimaryKeyCheck value) {
        set(12, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Require_table_primary_key_check</code>. Indicates what is the channel policy regarding tables having primary keys on create and alter table queries
     */
    public SlaveRelayLogInfoRequireTablePrimaryKeyCheck getRequireTablePrimaryKeyCheck() {
        return (SlaveRelayLogInfoRequireTablePrimaryKeyCheck) get(12);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_type</code>. Indicates whether the channel will generate a new GTID for anonymous transactions. OFF means that anonymous transactions will remain anonymous. LOCAL means that anonymous transactions will be assigned a newly generated GTID based on server_uuid. UUID indicates that anonymous transactions will be assigned a newly generated GTID based on Assign_gtids_to_anonymous_transactions_value
     */
    public void setAssignGtidsToAnonymousTransactionsType(SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType value) {
        set(13, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_type</code>. Indicates whether the channel will generate a new GTID for anonymous transactions. OFF means that anonymous transactions will remain anonymous. LOCAL means that anonymous transactions will be assigned a newly generated GTID based on server_uuid. UUID indicates that anonymous transactions will be assigned a newly generated GTID based on Assign_gtids_to_anonymous_transactions_value
     */
    public SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType getAssignGtidsToAnonymousTransactionsType() {
        return (SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType) get(13);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_value</code>. Indicates the UUID used while generating GTIDs for anonymous transactions
     */
    public void setAssignGtidsToAnonymousTransactionsValue(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_value</code>. Indicates the UUID used while generating GTIDs for anonymous transactions
     */
    public String getAssignGtidsToAnonymousTransactionsValue() {
        return (String) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row15<UInteger, String, ULong, String, ULong, Integer, UInteger, UInteger, String, String, String, Byte, SlaveRelayLogInfoRequireTablePrimaryKeyCheck, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row15<UInteger, String, ULong, String, ULong, Integer, UInteger, UInteger, String, String, String, Byte, SlaveRelayLogInfoRequireTablePrimaryKeyCheck, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType, String> valuesRow() {
        return (Row15) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field1() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.NUMBER_OF_LINES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.RELAY_LOG_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field3() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.RELAY_LOG_POS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.MASTER_LOG_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field5() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.MASTER_LOG_POS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.SQL_DELAY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field7() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.NUMBER_OF_WORKERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field8() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.CHANNEL_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field10() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.PRIVILEGE_CHECKS_USERNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field11() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.PRIVILEGE_CHECKS_HOSTNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field12() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.REQUIRE_ROW_FORMAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<SlaveRelayLogInfoRequireTablePrimaryKeyCheck> field13() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.REQUIRE_TABLE_PRIMARY_KEY_CHECK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType> field14() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field15() {
        return SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component1() {
        return getNumberOfLines();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getRelayLogName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component3() {
        return getRelayLogPos();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getMasterLogName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component5() {
        return getMasterLogPos();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component6() {
        return getSqlDelay();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component7() {
        return getNumberOfWorkers();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component8() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return getChannelName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component10() {
        return getPrivilegeChecksUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component11() {
        return getPrivilegeChecksHostname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component12() {
        return getRequireRowFormat();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRequireTablePrimaryKeyCheck component13() {
        return getRequireTablePrimaryKeyCheck();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType component14() {
        return getAssignGtidsToAnonymousTransactionsType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component15() {
        return getAssignGtidsToAnonymousTransactionsValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value1() {
        return getNumberOfLines();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getRelayLogName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value3() {
        return getRelayLogPos();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getMasterLogName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value5() {
        return getMasterLogPos();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getSqlDelay();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value7() {
        return getNumberOfWorkers();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value8() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return getChannelName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value10() {
        return getPrivilegeChecksUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value11() {
        return getPrivilegeChecksHostname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value12() {
        return getRequireRowFormat();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRequireTablePrimaryKeyCheck value13() {
        return getRequireTablePrimaryKeyCheck();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType value14() {
        return getAssignGtidsToAnonymousTransactionsType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value15() {
        return getAssignGtidsToAnonymousTransactionsValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value1(UInteger value) {
        setNumberOfLines(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value2(String value) {
        setRelayLogName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value3(ULong value) {
        setRelayLogPos(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value4(String value) {
        setMasterLogName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value5(ULong value) {
        setMasterLogPos(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value6(Integer value) {
        setSqlDelay(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value7(UInteger value) {
        setNumberOfWorkers(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value8(UInteger value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value9(String value) {
        setChannelName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value10(String value) {
        setPrivilegeChecksUsername(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value11(String value) {
        setPrivilegeChecksHostname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value12(Byte value) {
        setRequireRowFormat(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value13(SlaveRelayLogInfoRequireTablePrimaryKeyCheck value) {
        setRequireTablePrimaryKeyCheck(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value14(SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType value) {
        setAssignGtidsToAnonymousTransactionsType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord value15(String value) {
        setAssignGtidsToAnonymousTransactionsValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SlaveRelayLogInfoRecord values(UInteger value1, String value2, ULong value3, String value4, ULong value5, Integer value6, UInteger value7, UInteger value8, String value9, String value10, String value11, Byte value12, SlaveRelayLogInfoRequireTablePrimaryKeyCheck value13, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType value14, String value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SlaveRelayLogInfoRecord
     */
    public SlaveRelayLogInfoRecord() {
        super(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO);
    }

    /**
     * Create a detached, initialised SlaveRelayLogInfoRecord
     */
    public SlaveRelayLogInfoRecord(UInteger numberOfLines, String relayLogName, ULong relayLogPos, String masterLogName, ULong masterLogPos, Integer sqlDelay, UInteger numberOfWorkers, UInteger id, String channelName, String privilegeChecksUsername, String privilegeChecksHostname, Byte requireRowFormat, SlaveRelayLogInfoRequireTablePrimaryKeyCheck requireTablePrimaryKeyCheck, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType assignGtidsToAnonymousTransactionsType, String assignGtidsToAnonymousTransactionsValue) {
        super(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO);

        set(0, numberOfLines);
        set(1, relayLogName);
        set(2, relayLogPos);
        set(3, masterLogName);
        set(4, masterLogPos);
        set(5, sqlDelay);
        set(6, numberOfWorkers);
        set(7, id);
        set(8, channelName);
        set(9, privilegeChecksUsername);
        set(10, privilegeChecksHostname);
        set(11, requireRowFormat);
        set(12, requireTablePrimaryKeyCheck);
        set(13, assignGtidsToAnonymousTransactionsType);
        set(14, assignGtidsToAnonymousTransactionsValue);
    }
}
