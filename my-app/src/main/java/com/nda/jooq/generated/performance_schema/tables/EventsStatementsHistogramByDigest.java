/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.performance_schema.tables;


import com.nda.jooq.generated.performance_schema.Indexes;
import com.nda.jooq.generated.performance_schema.Keys;
import com.nda.jooq.generated.performance_schema.PerformanceSchema;
import com.nda.jooq.generated.performance_schema.tables.records.EventsStatementsHistogramByDigestRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsStatementsHistogramByDigest extends TableImpl<EventsStatementsHistogramByDigestRecord> {

    private static final long serialVersionUID = 1040387853;

    /**
     * The reference instance of <code>performance_schema.events_statements_histogram_by_digest</code>
     */
    public static final EventsStatementsHistogramByDigest EVENTS_STATEMENTS_HISTOGRAM_BY_DIGEST = new EventsStatementsHistogramByDigest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsStatementsHistogramByDigestRecord> getRecordType() {
        return EventsStatementsHistogramByDigestRecord.class;
    }

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.SCHEMA_NAME</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, String> SCHEMA_NAME = createField("SCHEMA_NAME", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.DIGEST</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, String> DIGEST = createField("DIGEST", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.BUCKET_NUMBER</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, UInteger> BUCKET_NUMBER = createField("BUCKET_NUMBER", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.BUCKET_TIMER_LOW</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, ULong> BUCKET_TIMER_LOW = createField("BUCKET_TIMER_LOW", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.BUCKET_TIMER_HIGH</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, ULong> BUCKET_TIMER_HIGH = createField("BUCKET_TIMER_HIGH", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.COUNT_BUCKET</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, ULong> COUNT_BUCKET = createField("COUNT_BUCKET", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.COUNT_BUCKET_AND_LOWER</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, ULong> COUNT_BUCKET_AND_LOWER = createField("COUNT_BUCKET_AND_LOWER", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>performance_schema.events_statements_histogram_by_digest.BUCKET_QUANTILE</code>.
     */
    public final TableField<EventsStatementsHistogramByDigestRecord, Double> BUCKET_QUANTILE = createField("BUCKET_QUANTILE", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>performance_schema.events_statements_histogram_by_digest</code> table reference
     */
    public EventsStatementsHistogramByDigest() {
        this(DSL.name("events_statements_histogram_by_digest"), null);
    }

    /**
     * Create an aliased <code>performance_schema.events_statements_histogram_by_digest</code> table reference
     */
    public EventsStatementsHistogramByDigest(String alias) {
        this(DSL.name(alias), EVENTS_STATEMENTS_HISTOGRAM_BY_DIGEST);
    }

    /**
     * Create an aliased <code>performance_schema.events_statements_histogram_by_digest</code> table reference
     */
    public EventsStatementsHistogramByDigest(Name alias) {
        this(alias, EVENTS_STATEMENTS_HISTOGRAM_BY_DIGEST);
    }

    private EventsStatementsHistogramByDigest(Name alias, Table<EventsStatementsHistogramByDigestRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventsStatementsHistogramByDigest(Name alias, Table<EventsStatementsHistogramByDigestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENTS_STATEMENTS_HISTOGRAM_BY_DIGEST_SCHEMA_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventsStatementsHistogramByDigestRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsStatementsHistogramByDigestRecord>>asList(Keys.KEY_EVENTS_STATEMENTS_HISTOGRAM_BY_DIGEST_SCHEMA_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventsStatementsHistogramByDigest as(String alias) {
        return new EventsStatementsHistogramByDigest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventsStatementsHistogramByDigest as(Name alias) {
        return new EventsStatementsHistogramByDigest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStatementsHistogramByDigest rename(String name) {
        return new EventsStatementsHistogramByDigest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsStatementsHistogramByDigest rename(Name name) {
        return new EventsStatementsHistogramByDigest(name, null);
    }
}
