/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.sys.tables;


import com.nda.jooq.generated.sys.Sys;
import com.nda.jooq.generated.sys.tables.records.StatementsWithTempTablesRecord;

import java.math.BigInteger;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatementsWithTempTables extends TableImpl<StatementsWithTempTablesRecord> {

    private static final long serialVersionUID = -1376071419;

    /**
     * The reference instance of <code>sys.statements_with_temp_tables</code>
     */
    public static final StatementsWithTempTables STATEMENTS_WITH_TEMP_TABLES = new StatementsWithTempTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementsWithTempTablesRecord> getRecordType() {
        return StatementsWithTempTablesRecord.class;
    }

    /**
     * The column <code>sys.statements_with_temp_tables.query</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> QUERY = createField("query", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.db</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> DB = createField("db", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.exec_count</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, ULong> EXEC_COUNT = createField("exec_count", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.total_latency</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> TOTAL_LATENCY = createField("total_latency", org.jooq.impl.SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.memory_tmp_tables</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, ULong> MEMORY_TMP_TABLES = createField("memory_tmp_tables", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.disk_tmp_tables</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, ULong> DISK_TMP_TABLES = createField("disk_tmp_tables", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.avg_tmp_tables_per_query</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, BigInteger> AVG_TMP_TABLES_PER_QUERY = createField("avg_tmp_tables_per_query", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.tmp_tables_to_disk_pct</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, BigInteger> TMP_TABLES_TO_DISK_PCT = createField("tmp_tables_to_disk_pct", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(24).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.first_seen</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, Timestamp> FIRST_SEEN = createField("first_seen", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.last_seen</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, Timestamp> LAST_SEEN = createField("last_seen", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_temp_tables.digest</code>.
     */
    public final TableField<StatementsWithTempTablesRecord, String> DIGEST = createField("digest", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>sys.statements_with_temp_tables</code> table reference
     */
    public StatementsWithTempTables() {
        this(DSL.name("statements_with_temp_tables"), null);
    }

    /**
     * Create an aliased <code>sys.statements_with_temp_tables</code> table reference
     */
    public StatementsWithTempTables(String alias) {
        this(DSL.name(alias), STATEMENTS_WITH_TEMP_TABLES);
    }

    /**
     * Create an aliased <code>sys.statements_with_temp_tables</code> table reference
     */
    public StatementsWithTempTables(Name alias) {
        this(alias, STATEMENTS_WITH_TEMP_TABLES);
    }

    private StatementsWithTempTables(Name alias, Table<StatementsWithTempTablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatementsWithTempTables(Name alias, Table<StatementsWithTempTablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "VIEW");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatementsWithTempTables as(String alias) {
        return new StatementsWithTempTables(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatementsWithTempTables as(Name alias) {
        return new StatementsWithTempTables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithTempTables rename(String name) {
        return new StatementsWithTempTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithTempTables rename(Name name) {
        return new StatementsWithTempTables(name, null);
    }
}
