/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.sys.tables.records;


import com.nda.jooq.generated.sys.tables.SchemaRedundantIndexes;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaRedundantIndexesRecord extends TableRecordImpl<SchemaRedundantIndexesRecord> implements Record10<String, String, String, String, Integer, String, String, Integer, Integer, String> {

    private static final long serialVersionUID = 986878416;

    /**
     * Setter for <code>sys.schema_redundant_indexes.table_schema</code>.
     */
    public void setTableSchema(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.table_schema</code>.
     */
    public String getTableSchema() {
        return (String) get(0);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.table_name</code>.
     */
    public void setTableName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.table_name</code>.
     */
    public String getTableName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.redundant_index_name</code>.
     */
    public void setRedundantIndexName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.redundant_index_name</code>.
     */
    public String getRedundantIndexName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.redundant_index_columns</code>.
     */
    public void setRedundantIndexColumns(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.redundant_index_columns</code>.
     */
    public String getRedundantIndexColumns() {
        return (String) get(3);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.redundant_index_non_unique</code>.
     */
    public void setRedundantIndexNonUnique(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.redundant_index_non_unique</code>.
     */
    public Integer getRedundantIndexNonUnique() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.dominant_index_name</code>.
     */
    public void setDominantIndexName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.dominant_index_name</code>.
     */
    public String getDominantIndexName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.dominant_index_columns</code>.
     */
    public void setDominantIndexColumns(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.dominant_index_columns</code>.
     */
    public String getDominantIndexColumns() {
        return (String) get(6);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.dominant_index_non_unique</code>.
     */
    public void setDominantIndexNonUnique(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.dominant_index_non_unique</code>.
     */
    public Integer getDominantIndexNonUnique() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.subpart_exists</code>.
     */
    public void setSubpartExists(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.subpart_exists</code>.
     */
    public Integer getSubpartExists() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>sys.schema_redundant_indexes.sql_drop_index</code>.
     */
    public void setSqlDropIndex(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>sys.schema_redundant_indexes.sql_drop_index</code>.
     */
    public String getSqlDropIndex() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<String, String, String, String, Integer, String, String, Integer, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<String, String, String, String, Integer, String, String, Integer, Integer, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.TABLE_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.TABLE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.REDUNDANT_INDEX_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.REDUNDANT_INDEX_COLUMNS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.REDUNDANT_INDEX_NON_UNIQUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.DOMINANT_INDEX_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field7() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.DOMINANT_INDEX_COLUMNS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field8() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.DOMINANT_INDEX_NON_UNIQUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field9() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.SUBPART_EXISTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field10() {
        return SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES.SQL_DROP_INDEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getTableSchema();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getTableName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getRedundantIndexName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getRedundantIndexColumns();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getRedundantIndexNonUnique();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getDominantIndexName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component7() {
        return getDominantIndexColumns();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component8() {
        return getDominantIndexNonUnique();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component9() {
        return getSubpartExists();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component10() {
        return getSqlDropIndex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getTableSchema();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getTableName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getRedundantIndexName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getRedundantIndexColumns();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getRedundantIndexNonUnique();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getDominantIndexName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value7() {
        return getDominantIndexColumns();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value8() {
        return getDominantIndexNonUnique();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value9() {
        return getSubpartExists();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value10() {
        return getSqlDropIndex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value1(String value) {
        setTableSchema(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value2(String value) {
        setTableName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value3(String value) {
        setRedundantIndexName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value4(String value) {
        setRedundantIndexColumns(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value5(Integer value) {
        setRedundantIndexNonUnique(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value6(String value) {
        setDominantIndexName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value7(String value) {
        setDominantIndexColumns(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value8(Integer value) {
        setDominantIndexNonUnique(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value9(Integer value) {
        setSubpartExists(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord value10(String value) {
        setSqlDropIndex(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaRedundantIndexesRecord values(String value1, String value2, String value3, String value4, Integer value5, String value6, String value7, Integer value8, Integer value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemaRedundantIndexesRecord
     */
    public SchemaRedundantIndexesRecord() {
        super(SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES);
    }

    /**
     * Create a detached, initialised SchemaRedundantIndexesRecord
     */
    public SchemaRedundantIndexesRecord(String tableSchema, String tableName, String redundantIndexName, String redundantIndexColumns, Integer redundantIndexNonUnique, String dominantIndexName, String dominantIndexColumns, Integer dominantIndexNonUnique, Integer subpartExists, String sqlDropIndex) {
        super(SchemaRedundantIndexes.SCHEMA_REDUNDANT_INDEXES);

        set(0, tableSchema);
        set(1, tableName);
        set(2, redundantIndexName);
        set(3, redundantIndexColumns);
        set(4, redundantIndexNonUnique);
        set(5, dominantIndexName);
        set(6, dominantIndexColumns);
        set(7, dominantIndexNonUnique);
        set(8, subpartExists);
        set(9, sqlDropIndex);
    }
}
