/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.performance_schema.tables;


import com.nda.jooq.generated.performance_schema.PerformanceSchema;
import com.nda.jooq.generated.performance_schema.tables.records.ReplicationAsynchronousConnectionFailoverRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationAsynchronousConnectionFailover extends TableImpl<ReplicationAsynchronousConnectionFailoverRecord> {

    private static final long serialVersionUID = 1642321385;

    /**
     * The reference instance of <code>performance_schema.replication_asynchronous_connection_failover</code>
     */
    public static final ReplicationAsynchronousConnectionFailover REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER = new ReplicationAsynchronousConnectionFailover();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplicationAsynchronousConnectionFailoverRecord> getRecordType() {
        return ReplicationAsynchronousConnectionFailoverRecord.class;
    }

    /**
     * The column <code>performance_schema.replication_asynchronous_connection_failover.CHANNEL_NAME</code>. The replication channel name that connects source and replica.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverRecord, String> CHANNEL_NAME = createField("CHANNEL_NAME", org.jooq.impl.SQLDataType.CHAR(64).nullable(false), this, "The replication channel name that connects source and replica.");

    /**
     * The column <code>performance_schema.replication_asynchronous_connection_failover.HOST</code>. The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverRecord, String> HOST = createField("HOST", org.jooq.impl.SQLDataType.CHAR(255).nullable(false), this, "The source hostname that the replica will attempt to switch over the replication connection to in case of a failure.");

    /**
     * The column <code>performance_schema.replication_asynchronous_connection_failover.PORT</code>. The source port that the replica will attempt to switch over the replication connection to in case of a failure.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverRecord, Integer> PORT = createField("PORT", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "The source port that the replica will attempt to switch over the replication connection to in case of a failure.");

    /**
     * The column <code>performance_schema.replication_asynchronous_connection_failover.NETWORK_NAMESPACE</code>. The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverRecord, String> NETWORK_NAMESPACE = createField("NETWORK_NAMESPACE", org.jooq.impl.SQLDataType.CHAR(64), this, "The source network namespace that the replica will attempt to switch over the replication connection to in case of a failure. If its value is empty, connections use the default (global) namespace.");

    /**
     * The column <code>performance_schema.replication_asynchronous_connection_failover.WEIGHT</code>. The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverRecord, UInteger> WEIGHT = createField("WEIGHT", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "The order in which the replica shall try to switch the connection over to when there are failures. Weight can be set to a number between 1 and 100, where 100 is the highest weight and 1 the lowest.");

    /**
     * The column <code>performance_schema.replication_asynchronous_connection_failover.MANAGED_NAME</code>. The name of the group which this server belongs to.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverRecord, String> MANAGED_NAME = createField("MANAGED_NAME", org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "The name of the group which this server belongs to.");

    /**
     * Create a <code>performance_schema.replication_asynchronous_connection_failover</code> table reference
     */
    public ReplicationAsynchronousConnectionFailover() {
        this(DSL.name("replication_asynchronous_connection_failover"), null);
    }

    /**
     * Create an aliased <code>performance_schema.replication_asynchronous_connection_failover</code> table reference
     */
    public ReplicationAsynchronousConnectionFailover(String alias) {
        this(DSL.name(alias), REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER);
    }

    /**
     * Create an aliased <code>performance_schema.replication_asynchronous_connection_failover</code> table reference
     */
    public ReplicationAsynchronousConnectionFailover(Name alias) {
        this(alias, REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER);
    }

    private ReplicationAsynchronousConnectionFailover(Name alias, Table<ReplicationAsynchronousConnectionFailoverRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationAsynchronousConnectionFailover(Name alias, Table<ReplicationAsynchronousConnectionFailoverRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReplicationAsynchronousConnectionFailover as(String alias) {
        return new ReplicationAsynchronousConnectionFailover(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReplicationAsynchronousConnectionFailover as(Name alias) {
        return new ReplicationAsynchronousConnectionFailover(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationAsynchronousConnectionFailover rename(String name) {
        return new ReplicationAsynchronousConnectionFailover(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationAsynchronousConnectionFailover rename(Name name) {
        return new ReplicationAsynchronousConnectionFailover(name, null);
    }
}
