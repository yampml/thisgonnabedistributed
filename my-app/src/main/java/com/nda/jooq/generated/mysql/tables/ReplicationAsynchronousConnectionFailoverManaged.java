/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.mysql.tables;


import com.nda.jooq.generated.mysql.Indexes;
import com.nda.jooq.generated.mysql.Keys;
import com.nda.jooq.generated.mysql.Mysql;
import com.nda.jooq.generated.mysql.tables.records.ReplicationAsynchronousConnectionFailoverManagedRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * The managed source configuration details
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationAsynchronousConnectionFailoverManaged extends TableImpl<ReplicationAsynchronousConnectionFailoverManagedRecord> {

    private static final long serialVersionUID = 1882101398;

    /**
     * The reference instance of <code>mysql.replication_asynchronous_connection_failover_managed</code>
     */
    public static final ReplicationAsynchronousConnectionFailoverManaged REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED = new ReplicationAsynchronousConnectionFailoverManaged();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplicationAsynchronousConnectionFailoverManagedRecord> getRecordType() {
        return ReplicationAsynchronousConnectionFailoverManagedRecord.class;
    }

    /**
     * The column <code>mysql.replication_asynchronous_connection_failover_managed.Channel_name</code>. The replication channel name that connects source and replica.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String> CHANNEL_NAME = createField("Channel_name", org.jooq.impl.SQLDataType.CHAR(64).nullable(false), this, "The replication channel name that connects source and replica.");

    /**
     * The column <code>mysql.replication_asynchronous_connection_failover_managed.Managed_name</code>. The name of the source which needs to be managed.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String> MANAGED_NAME = createField("Managed_name", org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "The name of the source which needs to be managed.");

    /**
     * The column <code>mysql.replication_asynchronous_connection_failover_managed.Managed_type</code>. Determines the managed type.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String> MANAGED_TYPE = createField("Managed_type", org.jooq.impl.SQLDataType.CHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "Determines the managed type.");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, Object> CONFIGURATION = createField("Configuration", org.jooq.impl.DefaultDataType.getDefaultDataType("json"), this, "The data to help manage group. For Managed_type = GroupReplication, Configuration value should contain {\"Primary_weight\": 80, \"Secondary_weight\": 60}, so that it assigns weight=80 to PRIMARY of the group, and weight=60 for rest of the members in mysql.replication_asynchronous_connection_failover table.");

    /**
     * Create a <code>mysql.replication_asynchronous_connection_failover_managed</code> table reference
     */
    public ReplicationAsynchronousConnectionFailoverManaged() {
        this(DSL.name("replication_asynchronous_connection_failover_managed"), null);
    }

    /**
     * Create an aliased <code>mysql.replication_asynchronous_connection_failover_managed</code> table reference
     */
    public ReplicationAsynchronousConnectionFailoverManaged(String alias) {
        this(DSL.name(alias), REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED);
    }

    /**
     * Create an aliased <code>mysql.replication_asynchronous_connection_failover_managed</code> table reference
     */
    public ReplicationAsynchronousConnectionFailoverManaged(Name alias) {
        this(alias, REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED);
    }

    private ReplicationAsynchronousConnectionFailoverManaged(Name alias, Table<ReplicationAsynchronousConnectionFailoverManagedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReplicationAsynchronousConnectionFailoverManaged(Name alias, Table<ReplicationAsynchronousConnectionFailoverManagedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "The managed source configuration details");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mysql.MYSQL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ReplicationAsynchronousConnectionFailoverManagedRecord> getPrimaryKey() {
        return Keys.KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ReplicationAsynchronousConnectionFailoverManagedRecord>> getKeys() {
        return Arrays.<UniqueKey<ReplicationAsynchronousConnectionFailoverManagedRecord>>asList(Keys.KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReplicationAsynchronousConnectionFailoverManaged as(String alias) {
        return new ReplicationAsynchronousConnectionFailoverManaged(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReplicationAsynchronousConnectionFailoverManaged as(Name alias) {
        return new ReplicationAsynchronousConnectionFailoverManaged(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationAsynchronousConnectionFailoverManaged rename(String name) {
        return new ReplicationAsynchronousConnectionFailoverManaged(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReplicationAsynchronousConnectionFailoverManaged rename(Name name) {
        return new ReplicationAsynchronousConnectionFailoverManaged(name, null);
    }
}
