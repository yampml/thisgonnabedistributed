/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.mysql.tables;


import com.nda.jooq.generated.mysql.Indexes;
import com.nda.jooq.generated.mysql.Keys;
import com.nda.jooq.generated.mysql.Mysql;
import com.nda.jooq.generated.mysql.tables.records.DefaultRolesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Default roles
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultRoles extends TableImpl<DefaultRolesRecord> {

    private static final long serialVersionUID = 701715550;

    /**
     * The reference instance of <code>mysql.default_roles</code>
     */
    public static final DefaultRoles DEFAULT_ROLES = new DefaultRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefaultRolesRecord> getRecordType() {
        return DefaultRolesRecord.class;
    }

    /**
     * The column <code>mysql.default_roles.HOST</code>.
     */
    public final TableField<DefaultRolesRecord, String> HOST = createField("HOST", org.jooq.impl.SQLDataType.CHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.default_roles.USER</code>.
     */
    public final TableField<DefaultRolesRecord, String> USER = createField("USER", org.jooq.impl.SQLDataType.CHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.default_roles.DEFAULT_ROLE_HOST</code>.
     */
    public final TableField<DefaultRolesRecord, String> DEFAULT_ROLE_HOST = createField("DEFAULT_ROLE_HOST", org.jooq.impl.SQLDataType.CHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("%", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.default_roles.DEFAULT_ROLE_USER</code>.
     */
    public final TableField<DefaultRolesRecord, String> DEFAULT_ROLE_USER = createField("DEFAULT_ROLE_USER", org.jooq.impl.SQLDataType.CHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>mysql.default_roles</code> table reference
     */
    public DefaultRoles() {
        this(DSL.name("default_roles"), null);
    }

    /**
     * Create an aliased <code>mysql.default_roles</code> table reference
     */
    public DefaultRoles(String alias) {
        this(DSL.name(alias), DEFAULT_ROLES);
    }

    /**
     * Create an aliased <code>mysql.default_roles</code> table reference
     */
    public DefaultRoles(Name alias) {
        this(alias, DEFAULT_ROLES);
    }

    private DefaultRoles(Name alias, Table<DefaultRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DefaultRoles(Name alias, Table<DefaultRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Default roles");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mysql.MYSQL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEFAULT_ROLES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DefaultRolesRecord> getPrimaryKey() {
        return Keys.KEY_DEFAULT_ROLES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DefaultRolesRecord>> getKeys() {
        return Arrays.<UniqueKey<DefaultRolesRecord>>asList(Keys.KEY_DEFAULT_ROLES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefaultRoles as(String alias) {
        return new DefaultRoles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DefaultRoles as(Name alias) {
        return new DefaultRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DefaultRoles rename(String name) {
        return new DefaultRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DefaultRoles rename(Name name) {
        return new DefaultRoles(name, null);
    }
}
