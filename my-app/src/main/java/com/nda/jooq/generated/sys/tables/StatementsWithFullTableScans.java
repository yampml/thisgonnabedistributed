/*
 * This file is generated by jOOQ.
*/
package com.nda.jooq.generated.sys.tables;


import com.nda.jooq.generated.sys.Sys;
import com.nda.jooq.generated.sys.tables.records.StatementsWithFullTableScansRecord;

import java.math.BigInteger;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatementsWithFullTableScans extends TableImpl<StatementsWithFullTableScansRecord> {

    private static final long serialVersionUID = -290438726;

    /**
     * The reference instance of <code>sys.statements_with_full_table_scans</code>
     */
    public static final StatementsWithFullTableScans STATEMENTS_WITH_FULL_TABLE_SCANS = new StatementsWithFullTableScans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementsWithFullTableScansRecord> getRecordType() {
        return StatementsWithFullTableScansRecord.class;
    }

    /**
     * The column <code>sys.statements_with_full_table_scans.query</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, String> QUERY = createField("query", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.db</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, String> DB = createField("db", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.exec_count</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, ULong> EXEC_COUNT = createField("exec_count", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.total_latency</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, String> TOTAL_LATENCY = createField("total_latency", org.jooq.impl.SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.no_index_used_count</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, ULong> NO_INDEX_USED_COUNT = createField("no_index_used_count", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.no_good_index_used_count</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, ULong> NO_GOOD_INDEX_USED_COUNT = createField("no_good_index_used_count", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.no_index_used_pct</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, BigInteger> NO_INDEX_USED_PCT = createField("no_index_used_pct", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(24).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DECIMAL_INTEGER)), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.rows_sent</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, ULong> ROWS_SENT = createField("rows_sent", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.rows_examined</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, ULong> ROWS_EXAMINED = createField("rows_examined", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.rows_sent_avg</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, BigInteger> ROWS_SENT_AVG = createField("rows_sent_avg", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.rows_examined_avg</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, BigInteger> ROWS_EXAMINED_AVG = createField("rows_examined_avg", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(21), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.first_seen</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, Timestamp> FIRST_SEEN = createField("first_seen", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.last_seen</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, Timestamp> LAST_SEEN = createField("last_seen", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>sys.statements_with_full_table_scans.digest</code>.
     */
    public final TableField<StatementsWithFullTableScansRecord, String> DIGEST = createField("digest", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * Create a <code>sys.statements_with_full_table_scans</code> table reference
     */
    public StatementsWithFullTableScans() {
        this(DSL.name("statements_with_full_table_scans"), null);
    }

    /**
     * Create an aliased <code>sys.statements_with_full_table_scans</code> table reference
     */
    public StatementsWithFullTableScans(String alias) {
        this(DSL.name(alias), STATEMENTS_WITH_FULL_TABLE_SCANS);
    }

    /**
     * Create an aliased <code>sys.statements_with_full_table_scans</code> table reference
     */
    public StatementsWithFullTableScans(Name alias) {
        this(alias, STATEMENTS_WITH_FULL_TABLE_SCANS);
    }

    private StatementsWithFullTableScans(Name alias, Table<StatementsWithFullTableScansRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatementsWithFullTableScans(Name alias, Table<StatementsWithFullTableScansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "VIEW");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatementsWithFullTableScans as(String alias) {
        return new StatementsWithFullTableScans(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatementsWithFullTableScans as(Name alias) {
        return new StatementsWithFullTableScans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithFullTableScans rename(String name) {
        return new StatementsWithFullTableScans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementsWithFullTableScans rename(Name name) {
        return new StatementsWithFullTableScans(name, null);
    }
}
